type Appointment {
    day: String,
    time: String,
    company: String
}
type Customer {
    id: ID,
    name: String,
    surname: String,
    email: String,
    type: TypeAccount
    appointments: [Appointment]
}
type Product {
    id: ID,
    name: String!,
    price: Int!,
    stock: Int!
}
input Order {
    id: ID,
    order: [orderProductInput],
    totalPrice: Int,
    date: String,
    customer: ID,
    status: OrderStatus
}
type OrderProduct {
    id: ID,
    quantity: Int
}
enum TypeAccount {
    USER
    COMPANY
    ADMIN
}
enum OrderStatus {
    PENDING,
    COMPLETED,
    CANCELLED
}
type Query {
    # Customer queries
    getAllCustomers(limit: Int, offset: Int): [Customer],
    getCustomerById(id: ID): Customer,
    totalCustomers: String
    # Product queries
    getAllProducts(limit: Int, offset: Int): [Product],
    getProductById(id: ID): Product,
    totalProducts: String
}
input AppointmentInput {
    day: String,
    time: String,
    company: String
}
input customerInput {
    id: ID,
    name: String,
    surname: String,
    email: String,
    type: TypeAccount
    appointments: [AppointmentInput]
}
input productInput {
    id: ID,
    name: String!,
    price: Int!,
    stock: Int!
}
input orderInput {
    id: ID,
    order: [orderProductInput],
    totalPrice: Int,
    date: String,
    customer: ID,
    status: OrderStatus
}
input orderProductInput {
    id: ID,
    quantity: Int
}
type Mutation {
    # Mutations for customers
    createCustomer(input: customerInput) : Customer,
    updateCustomer(input: customerInput) : Customer,
    removeCustomer(id: ID) : String
    # Mutations for products
    createProduct(input: productInput) : Product,
    updateProduct(input: productInput) : Product,
    removeProduct(id: ID) : String
    # Mutations for orders
    createOrder(input: orderInput) : Order,
}